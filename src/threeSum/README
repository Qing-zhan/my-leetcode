此问题目前看到的最好的方法时间复杂度为O(n^n)
1. 穷举法
遍历任意三个数的和为目标值，但是好像行不通，leetcode上跑不过

2. 双指针法
先对数组从小到大进行排序，遍历数组，每次循环中，增加两个指针，左指针指向较小的数，且起始点为遍历数字的下一个数字，右指针指向较大的数，且起始点为数组的最后一个数字。如果三个数的和小于零，则让左指针加1，如果和大于零则让右指针减1，如果和等于零，则把三个数字组合添加到最终的结果中。值得注意的是，和为零之后应该如何移动左右指针。由于结果中不允许出现重复的数字组合，下面三种情况会出现重复：
-5 -5 0 5  遍历第一个 -5 和第二个 -5
-5 2 2 3   左指针从第一个 -2 移动到第二个 -2
-5 2 3 3   右指针从最后一个 3 移动到倒数第二个 3
为了避免重复的情况，每次遍历以及每次指针的移动后，都需要判断当前指针所指向的值是否等于指针指向的前一个数字的值，如果相等则需要跳过当前数字，继续移动到下一个位置。
时间复杂度：O(n^n)
空间复杂度：O(1)
